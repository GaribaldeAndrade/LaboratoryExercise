module Parte1 (SW, HEX0, HEX1);
	input logic [7:0] SW;
	output logic [6:0] HEX0;
	output logic [6:0] HEX1;
	
	logic V,Z,A;
	logic M[4:0];
	assign LEDR = SW;
	assign V[4:0] = SW[4:0];
	
	if (V3 & (V0 | V1 | V2)) Z = 1;
	else  Z = 0 ;
	
	HEX0[0] = ~(0)	
endmodule

module setseg (SW,HEX);
	input logic [4:0] SW;
	output logic [6:0] HEX;
	
	assign HEX[0] = SW[0] & ~SW[1] & ~SW[2] & ~SW[3]| SW[2] & ~SW[0] & ~SW[1] & ~SW[3] ;
	assign HEX[1] = SW[0] & ~SW[1] & SW[2] & ~SW[3]| SW[2] & ~SW[0] & SW[1] & ~SW[3];
	assign HEX[2] = SW[1] & ~SW[0] & ~SW[2] & ~SW[3];
	assign HEX[3] = SW[0]  & ~SW[1] & ~SW[2] & ~SW[3]|  SW[2] & ~SW[0] & ~SW[1] & ~SW[3]| SW[2] & SW[0] & SW[1]& ~SW[3];
	assign HEX[4] = SW[0] | (SW[0] & SW[1]) |  SW[2] & ~SW[0] & ~SW[1] & ~SW[3] | SW[0] & ~SW[1] & SW[2] & ~SW[3]|  SW[2] & SW[0] & SW[1] | SW[3] & SW[0] & ~SW[1] & ~SW[2];
	assign HEX[5] = SW[0] & ~SW[1] & ~SW[2] & ~SW[3]| SW[1] & ~SW[0] & ~SW[2] & ~SW[3]|  SW[1] & SW[0] & ~SW[2]& ~SW[3] | SW[2] & SW[0] & SW[1]& ~SW[3];
	assign HEX[6] = (~SW[0] & ~SW[1] & ~SW[2] & ~SW[3]) |SW[0] & ~SW[1] & ~SW[2] & ~SW[3]| SW[2] & SW[0] & SW[1]& ~SW[3];
endmodule

module circuitA (V,SW);
input logic [4:0] V;
output logic [6:0] HEX;

assign HEX[0] = (V[0] & V[1] & V[3]) | (V[3] & V[2] & V[1]);
assign HEX[1] = (v[0] & V[1] & V[2] & V[3]);
assign HEX[2] = (v[3] & V[2]);
assign HEX[3] = (V[0] & V[1] & V[3]) | (V[3] & V[2] & V[1]);
assign HEX[4] = (V[0] & V[1] & V[3]) | (V[3] & V[2] & V[0] | (V[3] & V[2] & V[1]) | (v[0] & V[1] & V[2] & V[3]);
assign HEX[5] = (V[0] & V[1] & V[3]) | (v[3] & v[2]) | (V[3] & V[2] & V[0]);
assign HEX[6] = (V[1] & V[3]) | (V[0] & V[1] & V[3]);

endmodule 